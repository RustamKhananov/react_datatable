{"version":3,"sources":["TableCell.tsx","TableRow.tsx","Datatable.tsx","Filter.tsx","Pagination.tsx","TitlePagination.tsx","App.tsx","api.tsx","index.js"],"names":["TableCell","_ref","value","initialPhones","setInitialPhones","phoneId","head","_useState","useState","_useState2","Object","slicedToArray","isEdited","setIsEdited","_useState3","_useState4","newValue","setNewValue","setValueToOrigin","toConsumableArray","map","phone","id","react_default","a","createElement","className","onDoubleClick","key","Date","getTime","Fragment","autoFocus","onKeyDown","event","onClick","stopPropagation","onChange","target","onBlur","TableRow","trigger","handleRowClick","onSelectionChanged","heads","isFirstClick","concat","isSelected","setTimeout","clearTimeout","type","checked","TableCell_TableCell","Datatable","props","phones","columnsConfig","handleColumnHeadClick","isAllSelected","handleIsAllSelectedClick","keys","title","sortDirection","TableRow_TableRow","Filter","handleFilterChange","filterFieldValue","setFilterFieldValue","find","column","isSearchable","selectValue","setSelectValue","placeholder","Pagination","total","perPage","page","setPerPage","setPage","setTotal","countOfPages","Math","ceil","pageNumbers","i","push","disabled","pageNumber","length","TitlePagination","from","to","min","App","onPagePhones","setOnPagePhones","totalLength","setTotalLength","_useState5","_useState6","_useState7","_useState8","activePageNumber","setActivePageNumber","_useState9","_useState10","setIsAllSelected","_useState11","_useState12","setPhones","_useState13","_useState14","filteredPhones","setFilteredPhones","_useState15","_useState16","seachingText","setSeachingText","_useState17","_useState18","columnName","setColumnName","_useState19","age","sortType","imageUrl","name","snippet","_useState20","setColumnsConfig","window","onbeforeunload","useEffect","filter","toString","toLowerCase","includes","start","end","slice","localStorage","getItem","JSON","parse","fetch","then","response","json","phonesFromServer","objectSpread2","setSortDirectionsToDefault","Filter_Filter","newSeachingText","newColumnName","console","log","TitlePagination_TitlePagination","Datatable_Datatable","undefined","sort","b","localeCompare","isAll","Pagination_Pagination","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f3d5c3a2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TableCellPropsType } from './interfaces';\n\nexport const TableCell = ({\n  value,\n  initialPhones,\n  setInitialPhones,\n  phoneId,\n  head,\n}: TableCellPropsType) => {\n  const [isEdited, setIsEdited] = useState(false);\n  const [newValue, setNewValue] = useState(value);\n\n  const handleDoubleClick = () => {\n    setIsEdited(true)\n  }\n\n  const handleBlur = () => {\n    setValueToOrigin();\n    setIsEdited(false);\n  }\n\n  const setValueToOrigin = () => {\n    setInitialPhones(\n      [...initialPhones].map((phone) => {\n        if(phone.id === phoneId) {\n          phone[head] = newValue;\n        }\n        return phone;\n      })\n    );\n\n\n  }\n\n  const handleKeyDown = (event:React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if(event.key === 'Enter') {\n      setValueToOrigin();\n      setIsEdited(false);\n    }\n    if(event.key === 'Escape') {\n      setIsEdited(false);\n      setNewValue(value)\n    }\n  }\n\n  return (\n    <td\n      className=\"table__cell\"\n      onDoubleClick={handleDoubleClick}\n      key={new Date().getTime()}\n    >\n      {isEdited ?\n      <>\n      <textarea\n        autoFocus={true}\n        className=\"table__textarea\"\n        value={newValue}\n        onKeyDown={handleKeyDown}\n        onClick={(event) => {event.stopPropagation()}}\n        onChange={(event) => setNewValue(event.target.value)}\n        onBlur={handleBlur}\n      />\n      </> :\n        <p>\n          {value}\n        </p>}\n    </td>\n  )\n}\n","import React from 'react';\nimport { TableRowType } from './interfaces';\nimport { TableCell } from './TableCell';\n\nexport const TableRow = ({\n  phone,\n  handleRowClick,\n  onSelectionChanged,\n  heads,\n  initialPhones,\n  setInitialPhones,\n}: TableRowType) => {\n  let trigger: ReturnType<typeof setTimeout>;\n  let isFirstClick = true;\n  const isSingleClickChecker = () => {\n    if (isFirstClick) {\n      trigger = setTimeout(() => handleRowClick(phone.id), 200);\n      isFirstClick = false;\n    } else {\n      clearTimeout(trigger);\n      isFirstClick = true;\n    }\n  }\n\n  return (\n    <tr\n      key={`rowOf${phone.id}`}\n      className={phone.isSelected ? \"selected\" : ''}\n      onClick={isSingleClickChecker}\n    >\n      {typeof onSelectionChanged === 'function' ?\n        <td>\n          <input\n            type='checkbox'\n            checked={phone.isSelected}\n            onChange={() => {}}\n          >\n          </input>\n        </td> : ''}\n\n      {heads.map((head: string) => {\n        return (\n          <TableCell\n          key={phone.id + head}\n            value={phone[head]}\n            phoneId={phone.id}\n            head={head}\n            initialPhones={initialPhones}\n            setInitialPhones={setInitialPhones}\n          />\n\n        )\n      })}\n    </tr>)\n}\n","\nimport React from 'react';\nimport { DatatablePropsType, Phone } from './interfaces';\nimport { TableRow } from './TableRow';\n\nexport const Datatable = (props: DatatablePropsType) => {\n  const {\n    phones,\n    initialPhones,\n    columnsConfig,\n    onSelectionChanged,\n    handleColumnHeadClick,\n    isAllSelected,\n    handleIsAllSelectedClick,\n    handleRowClick,\n    setInitialPhones,\n  } = props;\n\n\n  const heads = Object.keys(columnsConfig);\n\n\n  return (\n    <table className=\"table\">\n      <thead className=\"thead\">\n        <tr>\n          {typeof onSelectionChanged === 'function' ?\n            <th><input\n              type='checkbox'\n              checked={isAllSelected}\n              onChange={() => {}}\n              onClick={handleIsAllSelectedClick}\n            ></input></th> : ''}\n          {heads.map((head: string) => (\n            <th\n              key={`headOf${head}`}\n              onClick={() => { handleColumnHeadClick(head) }}\n            >{`${columnsConfig[head].title}   ${columnsConfig[head].sortDirection || ''}`}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {phones.map((phone: Phone) => {\n          return (\n            <TableRow\n              key={phone.id}\n              initialPhones={initialPhones}\n              phone={phone}\n              handleRowClick={handleRowClick}\n              onSelectionChanged={onSelectionChanged}\n              heads={heads}\n              setInitialPhones={setInitialPhones}\n            />\n          )\n\n        })}\n      </tbody>\n    </table>\n  )\n}\n\n","\nimport React, { useState } from 'react';\nimport { FilterPropsType } from './interfaces';\n\nexport const Filter = ({ columnsConfig, handleFilterChange }: FilterPropsType) => {\n  const [filterFieldValue, setFilterFieldValue] = useState('');\n  const [selectValue, setSelectValue] = useState<string>(Object.keys(columnsConfig).find(\n    column => columnsConfig[column].isSearchable\n  ) || '');\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder=\"Enter seaching text here...\"\n        onChange={(event) => {\n          setFilterFieldValue(event.target.value);\n          handleFilterChange(event.target.value, selectValue)\n        }}\n      >\n      </input>\n      <select\n        value={selectValue}\n        onChange={(event) => {\n          setSelectValue(event.target.value)\n          handleFilterChange(filterFieldValue, event.target.value)\n        }}\n      >\n        <option></option>\n        {Object.keys(columnsConfig)\n          .map(column => {\n             if (columnsConfig[column].isSearchable) {\n              return (\n                <option\n                key={column}\n                >\n                  {column}\n                </option>\n              )\n            }\n            return '';\n          })\n        }\n      </select>\n    </>\n  )\n}\n\n","\nimport React from 'react';\nimport { PaginationPropsType } from './interfaces';\n\nexport const Pagination = ({\n  total,\n  perPage,\n  page,\n  setPerPage,\n  setTotal,\n  setPage }: PaginationPropsType) => {\n\n  const countOfPages = Math.ceil(total / perPage);\n  let pageNumbers = [];\n\n  for (let i = 0; i < countOfPages; i++) {\n    pageNumbers.push(i + 1);\n  }\n  return (\n    <div className=\"pagination\">\n      <label>\n        <select\n          className=\"pagination__per-page-select\"\n          value={perPage}\n          onChange={(event) => {\n            if (+event.target.value > 0) {\n              setPerPage(+event.target.value)\n            }\n          }\n\n          }\n        >\n          <option value={5}>5</option>\n          <option value={10}>10</option>\n          <option value={15}>15</option>\n          <option value={20}>20</option>\n        </select>\n        <span>items per page.</span>\n      </label>\n\n\n      <div\n        className=\"pagination__buttons-wrapper\"\n      >\n        <button\n          onClick={() => setPage(page - 1)}\n          disabled={page === 1}\n          className={page === 1 ? \"pagination__button nonActive\" : \"pagination__button\"}\n        >{'<<'}</button>\n        {pageNumbers.map(pageNumber => (\n          <button\n            key={new Date().getTime() * pageNumber}\n            onClick={() => setPage(pageNumber)}\n            className={page === pageNumber ? \"pagination__button pagination__button--active\" : \"pagination__button\"}\n          >\n            {pageNumber}\n          </button>\n        ))}\n        <button\n          onClick={() => setPage(page + 1)}\n          disabled={page === pageNumbers.length}\n          className={page === pageNumbers.length ? \"pagination__button nonActive\" : \"pagination__button\"}\n        >{'>>'}</button>\n      </div>\n\n    </div>\n  )\n}\n\n","\nimport React from 'react';\nimport {TitlePaginationPropsType} from './interfaces';\n\nexport const TitlePagination = ({from, to, total}:TitlePaginationPropsType) => {\n  return (\n    <h1\n    className=\"title-pagination\"\n    >\n      {`${from + 1} - ${Math.min(to, total)} from ${total}`}\n    </h1>\n  )\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { Datatable } from './Datatable';\nimport { getPhonesFromServer } from './api';\nimport { ColumnsConfig, Phone, PhoneFromServer } from './interfaces';\nimport { Filter } from './Filter';\nimport { Pagination } from './Pagination';\nimport { TitlePagination } from './TitlePagination';\n\n\n\n\nconst App = () => {\n  const [onPagePhones, setOnPagePhones] = useState<Phone[]>([])\n  const [totalLength, setTotalLength] = useState<number>(0);\n  const [perPage, setPerPage] = useState<number>(5);\n  const [activePageNumber, setActivePageNumber] = useState<number>(1);\n  const [isAllSelected, setIsAllSelected] = useState(false)\n  const [phones, setPhones] = useState<Phone[]>([]);\n  const [filteredPhones, setFilteredPhones] = useState<Phone[]>([]);\n  const [seachingText, setSeachingText] = useState('')\n  const [columnName, setColumnName] = useState('')\n  const [columnsConfig, setColumnsConfig] = useState<ColumnsConfig>({\n    age: {\n      title: 'Age',\n      sortType: 'number',\n      isSearchable: true,\n      sortDirection: '↕',\n    },\n    id: {\n      title: 'Id',\n      sortType: 'string',\n      isSearchable: true,\n      sortDirection: '↕',\n    },\n    imageUrl: {\n      title: 'imageUrl',\n      isSearchable: true,\n    },\n    name: {\n      title: 'Name',\n      sortType: 'string',\n      isSearchable: true,\n      sortDirection: '↕',\n    },\n    snippet: {\n      title: 'Snippet',\n      sortType: 'string',\n      isSearchable: true,\n      sortDirection: '↕',\n    }\n  });\n\n  window.onbeforeunload = function() {\n    return false;\n  };\n\n  useEffect(() => {\n    if (columnName === '' || seachingText === '') {\n      setFilteredPhones(phones);\n      return;\n    }\n    setFilteredPhones(phones.filter(phone => (\n      (phone[columnName])\n        .toString(10)\n        .toLowerCase()\n        .includes(seachingText.toLowerCase()))))\n  }, [phones, columnName, seachingText])\n\n  useEffect(() => {\n    let start = (activePageNumber - 1) * perPage;\n    let end = start + perPage;\n    setOnPagePhones(filteredPhones.slice(start, end))\n  }, [totalLength, perPage, activePageNumber, filteredPhones])\n\n\n\n  useEffect(() => {\n    if (localStorage.getItem('phones')) {\n      setPhones(JSON.parse(localStorage.getItem('phones') || ''))\n    } else {\n      getPhonesFromServer().then((phonesFromServer: PhoneFromServer) => {\n        setPhones(phonesFromServer.map((phone: PhoneFromServer) => ({\n          ...phone,\n          isSelected: false,\n        })))\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    setTotalLength(filteredPhones.length);\n    let start = (activePageNumber - 1) * perPage;\n    let end = start + perPage;\n    setOnPagePhones(filteredPhones.slice(start, end))\n  }, [filteredPhones, activePageNumber, perPage])\n\n\n  const setSortDirectionsToDefault = () => {\n    for (let i in columnsConfig) {\n      if (columnsConfig[i].sortDirection === '↟'\n        || columnsConfig[i].sortDirection === '↡')\n        columnsConfig[i].sortDirection = '↕';\n    }\n  }\n\n  const handleColumnHeadClick: (head: string) => void = (head: string) => {\n    if (columnsConfig[head].sortDirection === '↕'\n      || columnsConfig[head].sortDirection === '↡') {\n      switch (columnsConfig[head].sortType) {\n        case undefined:\n          break;\n        case 'string':\n          setPhones([...phones].sort((a, b) => (a[head].localeCompare(b[head]))));\n          break;\n        case 'number':\n          setPhones([...phones].sort((a, b) => (a[head] - (b[head]))));\n          break;\n        default:\n          break;\n      };\n      setSortDirectionsToDefault();\n      columnsConfig[head].sortDirection = '↟';\n      setColumnsConfig({ ...columnsConfig })\n      console.log(phones)\n      return;\n    }\n\n    if (columnsConfig[head].sortDirection === '↟') {\n      switch (columnsConfig[head].sortType) {\n        case undefined:\n          break;\n        case 'string':\n          setPhones([...phones].sort((a, b) => (b[head].localeCompare(a[head]))));\n          break;\n        case 'number':\n          setPhones([...phones].sort((a, b) => (b[head] - (a[head]))));\n          break;\n        default:\n          break;\n      };\n      setSortDirectionsToDefault();\n      columnsConfig[head].sortDirection = '↡';\n      setColumnsConfig({ ...columnsConfig })\n      console.log(phones)\n      return;\n    }\n  }\n\n  const handleIsAllSelectedClick = () => {\n    setIsAllSelected(!isAllSelected);\n    setPhones(phones.map((phone) => {\n      phone.isSelected = !isAllSelected;\n      return phone;\n    }))\n\n  }\n\n\n\n  const handleRowClick = (phoneId: string) => {\n    let isAll = true;\n    setPhones(phones.map(phone => {\n      if (phone.id === phoneId) {\n        phone.isSelected = !phone.isSelected;\n      };\n\n      if (phone.isSelected === false) {\n        isAll = false;\n      }\n      return phone;\n    }));\n    setIsAllSelected(isAll);\n  }\n\n  const handleFilterChange = (newSeachingText: string, newColumnName: string) => {\n    console.log(seachingText, columnName)\n    if (newColumnName === '' || newSeachingText === '') {\n      setFilteredPhones(phones);\n      setColumnName(newColumnName);\n      setSeachingText(newSeachingText);\n      return;\n    }\n    setColumnName(newColumnName);\n    setSeachingText(newSeachingText);\n    setFilteredPhones(phones.filter(phone => (\n      (phone[newColumnName])\n        .toString(10)\n        .toLowerCase()\n        .includes(newSeachingText.toLowerCase()))))\n  }\n\n  return (\n    <>\n      <Filter\n        columnsConfig={columnsConfig}\n        handleFilterChange={handleFilterChange}\n      />\n      <TitlePagination\n        from={(activePageNumber - 1) * perPage}\n        to={(activePageNumber - 1) * perPage + perPage}\n        total={totalLength}\n      />\n\n      <Datatable\n        phones={onPagePhones}\n        initialPhones={phones}\n        setInitialPhones={setPhones}\n        columnsConfig={columnsConfig}\n\n        onSelectionChanged={() => { }}\n        handleColumnHeadClick={handleColumnHeadClick}\n        isAllSelected={isAllSelected}\n\n        handleIsAllSelectedClick={handleIsAllSelectedClick}\n        handleRowClick={handleRowClick}\n      />\n\n      <Pagination\n\n        total={totalLength}\n        setTotal={setTotalLength}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={activePageNumber}\n        setPage={setActivePageNumber}\n      />\n    </>\n  );\n}\n\nexport default App;\n","\nexport const getPhonesFromServer = () => {\n  return fetch('https://mate-academy.github.io/phone-catalogue-static/api/phones.json')\n    .then(response => response.json())\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.tsx';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}